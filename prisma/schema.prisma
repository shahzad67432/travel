// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@localhost:5433/mydatabase?schema=public"
}

// User and Authentication
model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  role           UserRole @default(TRAVELER)
  profilePicture String?
  loyaltyPoints  Int      @default(0)
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  partner       Partner?
  bookings      Booking[] // As traveler
  reviews       Review[] // Reviews written
  wishlists     Wishlist[]
  messages      Message[] // Messages sent
  notifications Notification[]
  adminActions  AdminAction[]
  blogs         Blog[] // Blogs written
}

enum UserRole {
  TRAVELER
  PARTNER
  ADMIN
  SUPER_ADMIN
}

// Partner Management
// model Partner {
//   id                 String             @id @default(uuid())
//   userId             String             @unique
//   user               User               @relation(fields: [userId], references: [id])
//   businessName       String
//   contactPerson      String
//   email              String             @unique
//   phoneNumber        String
//   Document           String?
//   partnerType        PartnerType
//   // regionsOperated   String[]
//   servicesOffered    String[]
//   payoutDetails      Json
//   verificationStatus VerificationStatus @default(PENDING)
//   commission         Float              @default(0)
//   averageRating      Float              @default(0)
//   createdAt          DateTime           @default(now())
//   updatedAt          DateTime           @updatedAt

//   // Relations
//   permissions          CategoryPermission[]
//   listings             Listing[]
//   bookings             Booking[] // Bookings received
//   payouts              Payout[]
//   reviews              Review[] // Reviews received
//   analytics            PartnerAnalytics?
//   actions              PartnerAction[]
//   modificationRequests ListingModificationRequest[]
// }

model Partner {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Basic Business Information
  businessName     String
  ownerFounderName String? // New field for owner/founder name
  contactPerson    String
  email            String  @unique
  phoneNumber      String
  telNumber        String? // Additional telephone number

  // Location and Operational Details
  officeAddress       String?
  operatingCityRegions String[] @default([])

  // Partner Type Specific Fields
  partnerType PartnerType

  // Tour Operator Specific Fields
  dtsLicenseNo          String?
  tourTypes             String[] @default([])
  organizeTreks         Boolean?
  orgInternationalTours Boolean?
  toursPerMonth         Int?

  // Business Registration and Verification
  Document          String?
  businessRegNumber String?
  yearEstablished   Int?

  // activity providers
  licenseNo String?

  // Contact and Online Presence
  websiteLink   String?
  facebookLink  String?
  instagramLink String?

  // Vehicle Rental Specific (if applicable)
  vehicleTypes           String[] @default([])
  vehicleCount           Int?
  pickupAddress          String?
  rentalPolicy           String?
  depositRequirements    String?
  BusinessRegistrationNo String?

  // Payment and Financial Details
  servicesOffered   String[]
  payoutDetails     Json
  // bankName          String?
  // bankBranch        String?
  // accountHolderName String?
  // iban              String?
  // accountNumber     String?

  verificationStatus VerificationStatus @default(PENDING)
  commission         Float              @default(0)
  groupTourAccess    Boolean @default(true)
  privateTourAccess Boolean @default(true)
  averageRating      Float              @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations (remain the same)
  permissions          CategoryPermission[]
  listings             Listing[]
  bookings             Booking[] // Bookings received
  payouts              Payout[]
  reviews              Review[] // Reviews received
  analytics            PartnerAnalytics?
  actions              PartnerAction[]
  modificationRequests ListingModificationRequest[]
}

enum PartnerType {
  HOTEL
  OPERATOR
  ACTIVITY_PROVIDER
  RENTAL_PROVIDERS
  TOUR_GUIDE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Category Management
model CategoryPermission {
  id            String        @id @default(uuid())
  partnerId     String
  partner       Partner       @relation(fields: [partnerId], references: [id])
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())

  @@unique([partnerId, categoryId])
}

model Category {
  id          String       @id @default(uuid())
  name        String       @unique
  enumName    CategoryEnum
  description String?
  createdAt   DateTime     @default(now())

  // Relations
  subCategories SubCategory[]
  permissions   CategoryPermission[]
  listings      Listing[]
}

enum CategoryEnum {
  HOTELS
  TOURS
  TREKS
  ACTIVITIES
  CAR_RENTAL
  BIKE_RENTAL
}

model SubCategory {
  id             String   @id @default(uuid())
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  requiredFields Json // for specific fields from admin
  name           String
  description    String?
  createdAt      DateTime @default(now())

  // Relations
  permissions CategoryPermission[]
  listings    Listing[]
}

model TourType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  listings    Listing[]
}

model TourTheme {
  id          String        @id @default(uuid())
  name        TourThemeType
  description String?
  createdAt   DateTime      @default(now())

  // Relations
  listings    Listing[]
}

enum TourThemeType {
  Sightseeing
  Expedition
  Mountaineering
  Safari
  Luxury
}

// Listing Management
model Listing {
  id            String       @id @default(uuid())
  partnerId     String
  partner       Partner      @relation(fields: [partnerId], references: [id])
  categoryId    String
  category      Category     @relation(fields: [categoryId], references: [id])
  subCategoryId String?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  tourTypeId    String?
  tourType      TourType?    @relation(fields: [tourTypeId], references: [id])
  tourThemeId   String?
  tourTheme     TourTheme?   @relation(fields: [tourThemeId], references: [id])

  For               FOR_CUSTOMER
  title             String
  description       String
  price             Json // Flexible pricing structure
  images            String[] // Array of image URLs
  location          String
  travelNinjaRating Float?
  userRating        Float                 @default(0)
  availability      Json // Calendar or date ranges
  isActive          Boolean               @default(true)
  approved          listingApprovedStatus @default(PENDING)
  // SEO fields
  seoTitle          String?
  seoDescription    String?
  seoKeywords       String[]              @default([])

  // Common tour/trek/activity fields
  duration           String?
  languages          String[] @default([])
  ageRange           String?
  departureCity      String?
  locations          String[] @default([])
  landmarks          Json? // Photos and names of key landmarks
  pricingByAge       Json? // Price breakdown by age group
  addOns             Json? // Optional services
  termsAndConditions String?
  faqs               Json?
  NotSuitableFor     String?
  IncludedServices   Json?
  ExcludedServices   Json?
  Type               String? // group or private

  // Trek/Climbing specific
  difficultyLevel     String?
  maxAltitude         Int?
  distance            Float?
  fitnessRequirements String?
  whatToBring         String[] @default([])

  // Activity specific
  activityType String?
  itinerary    Json? // Hour-by-hour or day-by-day plan
  startTime    String?
  capacity     Int?

  // Vehicle rental specific
  vehicleType   String?
  model         String?
  transmission  String?
  engineCC      Int?
  rentalPolicy  String?
  features      String[] @default([])
  pickupAddress String?
  rates         Json?
  withDriver    Boolean?

  // Hotel specific
  totalRooms      Int?
  roomTypes       Json? // List of room types with descriptions
  amenities       String[] @default([])
  roomPricing     Json?
  occupanyPerRoom Int?
  checkOutTime    Json?
  hotelPolicy     Json?

  // Guide specific
  guideExperience Int?
  specializations String[] @default([])
  certificates    String[] @default([])
  // GuideSpecificAvailability      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings             Booking[]
  reviews              Review[]
  wishlists            Wishlist[]
  modificationRequests ListingModificationRequest[]
  partnerActions       PartnerAction[]
}

enum FOR_CUSTOMER {
  LOCAL
  INTERNATIONAL
  BOTH
}

enum listingApprovedStatus {
  PENDING
  APPROVED
  REJECTED
}

// Booking and Payments
model Booking {
  id            String        @id @default(uuid())
  listingId     String
  listing       Listing       @relation(fields: [listingId], references: [id])
  travelerId    String
  traveler      User          @relation(fields: [travelerId], references: [id])
  partnerId     String
  partner       Partner       @relation(fields: [partnerId], references: [id])
  bookingType   String // Group, Private
  groupSize     Int?
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  bookingDates  Json
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  payments Payment[]
  payouts  Payout[]
  messages Message[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id])
  paymentMethod String
  transactionId String?
  amountPaid    Float
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
}

model Payout {
  id           String       @id @default(uuid())
  partnerId    String
  partner      Partner      @relation(fields: [partnerId], references: [id])
  bookingId    String
  booking      Booking      @relation(fields: [bookingId], references: [id])
  amount       Float
  payoutMethod String
  payoutStatus PayoutStatus @default(PENDING)
  payoutDate   DateTime?
  createdAt    DateTime     @default(now())
}

enum PayoutStatus {
  PENDING
  AMOUNT_RELEASED
  PROCESSED
  FAILED
}

// Reviews and Ratings
model Review {
  id              String   @id @default(uuid())
  listingId       String?
  listing         Listing? @relation(fields: [listingId], references: [id])
  partnerId       String
  partner         Partner  @relation(fields: [partnerId], references: [id])
  travelerId      String
  traveler        User     @relation(fields: [travelerId], references: [id])
  rating          Float
  title           String?
  partnerResponse String?
  comment         String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
}

// User Interactions
model Wishlist {
  id         String   @id @default(uuid())
  travelerId String
  traveler   User     @relation(fields: [travelerId], references: [id])
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([travelerId, listingId])
}

model Message {
  id        String   @id @default(uuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Content Management
model Blog {
  id             String   @id @default(uuid())
  title          String
  content        String   @db.Text
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[] @default([])
  type           BlogType
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum BlogType {
  NEWS
  GUIDES
  ARTICLE
}

model NewsletterSubscription {
  id           String   @id @default(uuid())
  email        String   @unique
  isSubscribed Boolean  @default(true)
  createdAt    DateTime @default(now())
}

// Promotions
model Coupon {
  id               String       @id @default(uuid())
  code             String       @unique
  discountType     DiscountType
  discountValue    Float
  maxUses          Int?
  usedCount        Int          @default(0)
  minBookingAmount Float?
  expirationDate   DateTime?
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Analytics and Reporting
model AdminAnalytics {
  id             String   @id @default(uuid())
  totalBookings  Int
  totalRevenue   Float
  totalPartners  Int
  totalTravelers Int
  topCategories  Json // Most popular categories
  topRegions     Json // Regions with highest activity
  monthlyReport  Json // Data broken down by month
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PartnerAnalytics {
  id                  String   @id @default(uuid())
  partnerId           String   @unique
  partner             Partner  @relation(fields: [partnerId], references: [id])
  totalEarnings       Float
  totalBookings       Int
  monthlyReport       Json // Data broken down by month
  mostPopularListings Json // Listings with highest bookings
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Administrative Actions
model AdminAction {
  id            String          @id @default(uuid())
  adminId       String
  admin         User            @relation(fields: [adminId], references: [id])
  actionType    AdminActionType
  createdAt     DateTime        @default(now())
}

enum AdminActionType {
  PARTNER_APPROVAL
  PARTNER_REJECTION
  LISTING_MODIFICATION
  LISTING_REMOVAL
  COUPON_CREATION
  CATEGORY_MANAGEMENT
  PARTNER_MANAGEMENT
}

model PartnerAction {
  id            String            @id @default(uuid())
  listingId     String?
  listing       Listing?          @relation(fields: [listingId], references: [id])
  partnerId     String?
  partner       Partner?          @relation(fields: [partnerId], references: [id])
  actionType    PartnerActionType
  actionDetails String?
  status        ActionStatus      @default(PENDING)
  createdAt     DateTime          @default(now())
}

enum PartnerActionType {
  LISTING_UPDATE
  CANCELLATION_REQUEST
  PAYOUT_REQUEST
  SUPPORT_INQUIRY
}

enum ActionStatus {
  PENDING
  RESOLVED
  REJECTED
}

model ListingModificationRequest {
  id               String             @id @default(uuid())
  partnerId        String
  partner          Partner            @relation(fields: [partnerId], references: [id])
  listingId        String
  listing          Listing            @relation(fields: [listingId], references: [id])
  requestedChanges Json // Key-value pairs of requested changes
  status           ModificationStatus @default(PENDING)
  adminNotes       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

enum ModificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Notifications
model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recipient   User             @relation(fields: [recipientId], references: [id])
  title       String
  content     String
  type        NotificationType
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
}

enum NotificationType {
  BOOKING_UPDATE
  PAYMENT_REMINDER
  MARKETING
  SYSTEM
  REVIEW_RECEIVED
  LISTING_UPDATE
}
