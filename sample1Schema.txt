// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@localhost:5433/mydatabase?schema=public"

}




enum UserRole {
  ADMIN
  PARTNER
  TRAVELER
}

enum PartnerType {
  HOTELS
  OPERATOR
  ACTIVITY_PROVIDER
  RentalProvider
}

enum ListingType {
  HOTEL
  TOUR
  TREK
  ACTIVITY
  CAR_RENTAL
  BIKE_RENTAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  SUITE
  FAMILY
  DELUXE
}

enum TourType {
  CULTURAL
  ADVENTURE
  WILDLIFE
  HISTORICAL
  SIGHTSEEING
}

enum TrekDifficulty {
  EASY
  MODERATE
  CHALLENGING
  DIFFICULT
  EXTREME
}

enum VehicleType {
  SEDAN
  SUV
  VAN
  BIKE_STANDARD
  BIKE_CRUISER
  BIKE_SPORT
}


model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  role              UserRole
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  profile           UserProfile?
  partnerProfile    PartnerProfile?
  bookings          Booking[]
  reviews           Review[]
  wishlist          WishlistItem[]
  messages          Message[]
  loyaltyPoints     Int               @default(0)
  notifications     Notification[]
  customItineraries CustomItinerary[] 
  whatsappChats     WhatsAppChat[]    
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  phoneNumber String?
  address     String?
  city        String?
  country     String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PartnerProfile {
  id               String      @id @default(cuid())
  userId           String      @unique
  user             User        @relation(fields: [userId], references: [id])
  businessName     String
  partnerType      PartnerType
  description      String?     @db.Text
  logo             String?
  coverImage       String?
  contactEmail     String
  contactPhone     String
  address          String
  city             String
  country          String
  isVerified       Boolean     @default(false)
  commission_rate  Float       @default(10.0)
  listings         Listing[]
  bankDetails      BankDetail?
  documents        Document[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}


model Listing {
  id                String            @id @default(cuid())
  type              ListingType
  partnerId         String
  partner           PartnerProfile    @relation(fields: [partnerId], references: [id])
  title             String
  description       String            @db.Text
  basePrice         Float
  location          String
  coordinates       Json              // {lat: float, lng: float}
  city              String
  Province             String?
  country           String
  images            Image[]
  rating            Float             @default(0)
  isActive          Boolean           @default(true)
  isFeatured        Boolean           @default(false)
  sustainableBadge  Boolean           @default(false)
  bookings          Booking[]
  reviews           Review[]
  wishlisted        WishlistItem[]
  customItineraries CustomItinerary[]
  faqs              FAQ[]
  cancelPolicy      String            @db.Text
  
  promotions        Promotion[]       @relation("ListingToPromotion")
  hotelListing     HotelListing?
  tourListing      TourListing?
  trekListing      TrekListing?
  activityListing  ActivityListing?
  rentalListing    RentalListing?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}


model HotelListing {
  id              String    @id @default(cuid())
  listingId       String    @unique
  listing         Listing   @relation(fields: [listingId], references: [id])
  checkInTime     String
  checkOutTime    String
  totalRooms      Int
  facilities       String[]
  rules           String[]
  rooms           Room[]
  parking         Boolean   @default(false)
  breakfast       Boolean   @default(false)
  restaurantOnsite Boolean  @default(false)
  roomService     Boolean   @default(false)
  fitnessCenter   Boolean   @default(false)
  minBookingDays  Int      @default(1)
}

model Room {
  id              String    @id @default(cuid())
  hotelListingId  String
  hotelListing    HotelListing @relation(fields: [hotelListingId], references: [id])
  type            RoomType
  description     String    @db.Text
  capacity        Int
  beds            Int
  bathrooms       Int
  price           Float
  quantity        Int
  facilities       String[]
  images          Image[]
  availability    RoomAvailability[]
}

model RoomAvailability {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  date      DateTime
  available Int
  price     Float?
}


model TourListing {
  id              String    @id @default(cuid())
  listingId       String    @unique
  listing         Listing   @relation(fields: [listingId], references: [id])
  tourType        TourType
  duration        Int
  groupSize       Int
  startLocation   String
  endLocation     String
  transportation  String[]
  accommodation   String[]
  meals           String[]
  itinerary       TourItineraryDay[]
  inclusions      String[]
  exclusions      String[]
  requirements    String[]
  departureSchedule TourDeparture[]
}

model TourItineraryDay {
  id            String      @id @default(cuid())
  tourListingId String
  tourListing   TourListing @relation(fields: [tourListingId], references: [id])
  dayNumber     Int
  title         String
  description   String      @db.Text
  activities    String[]
  meals         String[]
  accommodation String
  distance      Float?
}

model TourDeparture {
  id            String      @id @default(cuid())
  tourListingId String
  tourListing   TourListing @relation(fields: [tourListingId], references: [id])
  departureDate DateTime
  price         Float
  availableSeats Int
  status        String
}


model TrekListing {
  id              String         @id @default(cuid())
  listingId       String         @unique
  listing         Listing        @relation(fields: [listingId], references: [id])
  difficulty      TrekDifficulty
  maxAltitude     Float
  distance        Float
  duration        Int
  startPoint      String
  endPoint        String
  groupSize       Int
  season          String[]
  equipment       String[]
  itinerary       TrekItineraryDay[]
  inclusions      String[]
  exclusions      String[]
  fitness         String         @db.Text
  requirements    String[]
  departureSchedule TrekDeparture[]
}

model TrekItineraryDay {
  id            String      @id @default(cuid())
  trekListingId String
  trekListing   TrekListing @relation(fields: [trekListingId], references: [id])
  dayNumber     Int
  title         String
  description   String      @db.Text
  distance      Float
  elevation     Json
  hours         Float
  accommodation String
  meals         String[]
}

model TrekDeparture {
  id            String      @id @default(cuid())
  trekListingId String
  trekListing   TrekListing @relation(fields: [trekListingId], references: [id])
  departureDate DateTime
  price         Float
  availableSpots Int
  status        String
}

model ActivityListing {
  id              String    @id @default(cuid())
  listingId       String    @unique
  listing         Listing   @relation(fields: [listingId], references: [id])
  activityType    String
  duration        Float
  difficulty      String
  minAge          Int?
  maxAge          Int?
  groupSize       Json
  equipment       String[]
  provided        String[]
  requirements    String[]
  schedule        ActivitySchedule[]
}

model ActivitySchedule {
  id                String          @id @default(cuid())
  activityListingId String
  activityListing   ActivityListing @relation(fields: [activityListingId], references: [id])
  startTime         DateTime
  duration          Float
  price            Float
  availableSpots    Int
}

model RentalListing {
  id              String      @id @default(cuid())
  listingId       String      @unique
  listing         Listing     @relation(fields: [listingId], references: [id])
  vehicleType     VehicleType
  brand           String
  model           String
  year            Int
  transmission    String
  fuel            String?
  mileage         Float?
  features        String[]
  documents       String[]
  terms          String       @db.Text
  availability    RentalAvailability[]
}

model RentalAvailability {
  id              String        @id @default(cuid())
  rentalListingId String
  rentalListing   RentalListing @relation(fields: [rentalListingId], references: [id])
  date            DateTime
  isAvailable     Boolean
  price           Float?
}


model Booking {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  listingId       String
  listing         Listing       @relation(fields: [listingId], references: [id])
  promotionId     String?       // Added optional promotion
  promotion       Promotion?    @relation(fields: [promotionId], references: [id])
  startDate       DateTime
  endDate         DateTime
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  paymentId       String?
  payment         Payment?
  review          Review?
  guestCount      Int
  specialRequests String?
  messages        Message[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


model Payment {
  id            String    @id @default(cuid())
  bookingId     String    @unique
  booking       Booking   @relation(fields: [bookingId], references: [id])
  amount        Float
  currency      String    @default("PKR")
  method        String
  status        String
  transactionId String?
  payout        Payout?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payout {
  id        String       @id @default(cuid())
  paymentId String       @unique
  payment   Payment      @relation(fields: [paymentId], references: [id])
  amount    Float
  status    PayoutStatus
  bankId    String
  bank      BankDetail   @relation(fields: [bankId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model BankDetail {
  id              String         @id @default(cuid())
  partnerId       String         @unique
  partner         PartnerProfile @relation(fields: [partnerId], references: [id])
  bankName        String
  accountTitle    String
  accountNumber   String
  payouts         Payout[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])
  rating    Float
  comment   String   @db.Text
  response  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String   @id @default(cuid())
  url         String
  caption     String?
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  listingId   String?
  listing     Listing?  @relation(fields: [listingId], references: [id])
  roomId      String?
  room        Room?     @relation(fields: [roomId], references: [id])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Document {
  id          String         @id @default(cuid())
  partnerId   String
  partner     PartnerProfile @relation(fields: [partnerId], references: [id])
  type        String
  url         String
  isVerified  Boolean        @default(false)
  createdAt   DateTime       @default(now())
}

model FAQ {
  id        String   @id @default(cuid())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
}

model CustomItinerary { // itenary means like facility but here it means user can more then one listing combined
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String
  listings  Listing[]
  notes     String?   @db.Text
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BlogPost {
  id           String        @id @default(cuid())
  title        String
  slug         String        @unique
  content      String        @db.Text
  excerpt      String        @db.Text
  category     BlogCategory 
  tags         BlogTag[]
  author       String
  coverImage   String?
  isPublished  Boolean       @default(false)
  metaTitle    String?
  metaDesc     String?
  views        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum BlogCategory {
  ARTICLE
  POST
  GUIDE
}

model BlogTag {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
}

model NewsletterSubscription {
  id          String    @id @default(cuid())
  email       String    @unique
  isVerified  Boolean   @default(false)
  interests   String[]  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Promotion {
  id          String    @id @default(cuid())
  code        String    @unique
  type        PromoType
  value       Float     // Percentage or fixed amount
  maxUses     Int?
  usedCount   Int       @default(0)
  minAmount   Float?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  listings    Listing[] @relation("ListingToPromotion")
  bookings    Booking[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
}

model WhatsAppChat {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  phoneNumber String
  status      String    
  messages    WhatsAppMessage[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WhatsAppMessage {
  id          String    @id @default(cuid())
  chatId      String
  chat        WhatsAppChat @relation(fields: [chatId], references: [id])
  content     String    @db.Text
  direction   String
  status      String    
  timestamp   DateTime  @default(now())
}

// SEO and Analytics
model SEOMetadata {
  id          String    @id @default(cuid())
  pageUrl     String    @unique
  title       String
  description String    @db.Text
  keywords    String[]
  ogImage     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PageAnalytics {
  id          String    @id @default(cuid())
  pageUrl     String
  views       Int       @default(0)
  clicks      Int
  date        DateTime  @default(now())
  
  @@unique([pageUrl, date])
}